<?xml version="1.0" encoding="utf-8"?>
<s:WindowedApplication xmlns:fx="http://ns.adobe.com/mxml/2009" 
					   xmlns:s="library://ns.adobe.com/flex/spark" 
					   xmlns:mx="library://ns.adobe.com/flex/mx"
					   width="550"
					   height="200"
					   preinitialize="preinit()" currentState="base">
	<s:states>
		<s:State name="base"/>
		<s:State name="empty"/>
	</s:states>
	<mx:VBox width="100%" height="100%" horizontalAlign="center" verticalAlign="middle" paddingLeft="10" y="0" includeIn="base">
		<s:Label text="Загрузка .txt файла..." id="info" visible="false" width="100%"/>
		<s:Button label="Загрузить текстовый файл РЕСО" click="load()"/>
	</mx:VBox>
	<s:Button includeIn="empty" x="199" y="95" label="Попробовать ещё раз" click="preinit()"/>
	<fx:Script>
		<![CDATA[
			import classes.Controller;
			import classes.FirstGroupData;
			import classes.SecondGroupData;
			
			import interfaces.IDataString;
			
			import mx.controls.Alert;
			import mx.events.CloseEvent;
			private var file:FileReference = new FileReference();
			private var data_array:Array = new Array();
			private var initFile:String = "#Пример того, как выглядит файл, каждая строка с символом '#' в начале не учитывается\r\n#(по умолчанию файл заполнится данными, пригодными для распознавания текущей на момент написания версии РЕСО документа)\r\n#\r\n#\r\n#group1 // идентификатор того, что далее следует описание правил для 1й группы\r\n#columns // перечисление колонок\r\n#2012-\r\n#2011\r\n#2010\r\n#2009\r\n#2008\r\n#2007\r\n#2006\r\n#2005\r\n#f\r\n#k\r\n#rows // перечисление строк должны включать в себя точные копии из исходного документа,\r\n#по ним определяются границы того, или иного участка текста.\r\n#РСС, тыс.руб.\r\n#ТХ, %\r\n#МБП, тыс.руб.\r\n#ТДУ, %\r\n#group2 // идентификатор того, что далее следует описание правил для 2й группы\r\n#columns // перечисление колонок\r\n#2012-\r\n#2011\r\n#2010\r\n#2009\r\n#2008\r\n#2007\r\n#2006\r\n#2005\r\n#rows // перечисление строк должны включать в себя точные копии из исходного документа,\r\n#по ним определяются границы того, или иного участка текста.\r\n#group_names // регистронезависим. для корректной работы парсера на второй группе, необходимо ввести названия возможных групп автомобилей, перечисление от наибольшего к наименьшему, в случае однокоренного слова. например ВНЕДОРОДОРОЖНИКИ раньше ВНЕДОРОЖНИК\r\n#ЛЕГКОВЫЕ\r\n#Иномарки\r\n#ВНЕДОРОЖНИКИ\r\n#ВНЕДОРОЖНИК\r\n#LAND ROVER\r\n#LEXUS GX\r\n#MERCEDES G\r\n#SCANIA\r\n#Грузовые\r\n#АВТОДОМ\r\n#Грузовики для междугородних перевозок\r\n#Микроавтобусы Иномарки и Грузовики категории В\r\n#Микроавтобусы\r\n#Полуприцепы\r\n#Прицепы\r\n#Конец примера ///////////////////////////////////////////////////////////////////////////////////////////// можно удалить, если это мешает глазу\r\ngroup1\r\ncolumns\r\n2012-\r\n2011\r\n2010\r\n2009\r\n2008\r\n2007\r\n2006\r\n2005\r\nf\r\nk\r\nrows\r\nРСС, тыс.руб.\r\nТХ, %\r\nМБП, тыс.руб.\r\nТДУ, %\r\ngroup2\r\ncolumns\r\n2012-\r\n2011\r\n2010\r\n2009\r\n2008\r\n2007\r\n2006\r\n2005\r\nrows\r\ngroup_names\r\nЛЕГКОВЫЕ\r\nИномарки\r\nВНЕДОРОЖНИКИ\r\nВНЕДОРОЖНИК\r\nLAND ROVER\r\nLEXUS GX\r\nERCEDES G\r\nSCANIA\r\nГрузовые\r\nАВТОДОМ\r\nГрузовики для междугородних перевозок\r\nМикроавтобусы Иномарки и Грузовики категории В\r\nМикроавтобусы\r\nПолуприцепы\r\nПрицепы"
			
			private function self():RESOParser {
				return this;
			}
			
			private function preinit():void
			{
				Controller.tracer = traceCar;
				
				var f:File = File.documentsDirectory.resolvePath("reso_parser_data.txt"); 
				var stream:FileStream = new FileStream();
				try {
					stream.open(f, FileMode.READ);
				}catch(e:Error){
					this.visible = false;
					currentState = "empty";
					Alert.okLabel = "Ок, создать файл";
					Alert.noLabel = "Что это такое?";
					Alert.cancelLabel = "В другой раз";
					Alert.buttonWidth = 150;
					Alert.show("Нет файла reso_parser_data.txt в директории: "+File.documentsDirectory.nativePath, "Ошибка", Alert.OK | Alert.NO | Alert.CANCEL, self(), function(e:CloseEvent):void{
						if (e.detail == Alert.NO) {
							Alert.okLabel = "Ок, создать файл";
							Alert.noLabel = "В другой раз";
							Alert.show("reso_parser_data.txt - текстовый файл с набором правил для парсинга\r\nисходного текста РЕСО", "Информация", Alert.OK | Alert.CANCEL, self(), function(e:CloseEvent):void
							{
								if (e.detail == Alert.CANCEL) {
									NativeApplication.nativeApplication.exit();
								} else {
									creatRulesFile();
								}
							});
						} else if (e.detail == Alert.CANCEL) {
							NativeApplication.nativeApplication.exit();
						} else {
							creatRulesFile();
						}
					});
					return;
				}
			}
			
			public function traceCar(str:String):void
			{
				info.text = str;
			}
			
			private function creatRulesFile():void {
				var f:File = File.documentsDirectory.resolvePath("reso_parser_data.txt"); 
				var stream:FileStream = new FileStream();
				stream.open(f, FileMode.APPEND);
				var ba:ByteArray = new ByteArray();
				ba.writeUTFBytes(initFile);
				stream.writeBytes(ba);
				stream.close();
				f.openWithDefaultApplication();
				this.visible = true;
			}
			
			private function load():void 
			{
				var f:File = File.documentsDirectory.resolvePath("text.txt"); 
				var stream = new FileStream();
				stream.open(f, FileMode.WRITE);                                         
				
				//var j:JPGEncoder = new JPGEncoder(80);
				//var bytes:ByteArray = j.encode(visualLogo.bitmapData);
				//stream.writeBytes(bytes, 0, bytes.bytesAvailable);
				
				stream.writeUTFBytes("This is my text file.");
				stream.close();
				
				//file.addEventListener( Event.SELECT, doFileSelect );
				//file.addEventListener( Event.COMPLETE, doFileComplete );
				//file.browse( [new FileFilter( "txt Ресо файл", "*.txt" )] );
			}
			
			private function doFileSelect( event:Event ):void
			{
				this.enabled = false;
				info.visible = true;
				file.load();
			}
			
			private function doFileComplete( event:Event ):void
			{
				var str:String = file.data.readMultiByte( file.data.bytesAvailable, "ansi" );
				info.text = "Обработка данных...";
				parseText( str );
			}
			
			private function parseText( txt:String ):void
			{
				var data:IDataString;
				txt = txt.replace(/\r/gi," ");
				txt = txt.replace(/\t/gi," ");
				txt = mergeThousands(txt);
				var index:int = 0;
				var line:String = "";
				while (index < txt.length) {
					var _index:int = txt.indexOf("\n", index);
					line = txt.slice(index, _index);
					index = _index+1;
					
					if (line.indexOf("Группа I.",0) != -1) {
						if (data == null)
							data = new FirstGroupData();
					} else if (line.indexOf("Группа II.",0) != -1) {
						if (data is FirstGroupData) {
							data_array.push(data);
							data = new SecondGroupData();
						}
					}
					
					if (data != null) {
						if (line != "") {
							data.addDataString(line);
						}
					}
				}
				data_array.push(data);
			}
			
			private function mergeThousands(str:String):String
			{
				var index:int = 0;
				var digits:Array = ["0","1","2","3","4","5","6","7","8","9"];
				while (index < (str.length-4)) {
					var char1:String = str.charAt(index);
					var char2:String = str.charAt(index+1);
					var char3:String = str.slice(index+2,index+5);
					if ((digits.indexOf(char1)!=-1)&&(char2==" ")&&(isInt(char3))) {
						str = str.slice(0, index+1) + str.slice(index+2);
					}
					index++;
				}
				return str;
			}
			
			private function isInt(str:String):Boolean
			{
				var stringedInt:String = int(str).toString();
				if (stringedInt == str) return true;
				else {
					if (stringedInt.length < str.length) {
						var size:int = str.length - stringedInt.length;
						for (var i:int = 0; i < size; i++) {
							stringedInt = "0"+stringedInt;
						}
						if (stringedInt == str) return true;
						return false;
					}
				}
				return false;
			}
		]]>
	</fx:Script>
</s:WindowedApplication>
